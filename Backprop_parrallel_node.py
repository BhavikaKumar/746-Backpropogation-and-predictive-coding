# -*- coding: utf-8 -*-
"""746-64.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-HI-DidmcIHebKdPrlwKKd2o1HdIZ_Dj
"""

import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
from tqdm import tqdm
import torch.optim as optim
from torch.utils.tensorboard import SummaryWriter

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64,
                                          shuffle=False, num_workers=8)
testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=64,
                                         shuffle=False, num_workers=8)
classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

# functions to show an image
def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()
# get some random training images
dataiter = iter(trainloader)
images, labels = dataiter.next()

# sending image/label to gpu (device)
images = images.to(device)
labels = labels.to(device)

# show images
imshow(torchvision.utils.make_grid(images.cpu()))
# print labels
print(' '.join('%5s' % classes[labels[j]] for j in range(4)))

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()
PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)

net.load_state_dict(torch.load(PATH))
net = net.to(device)

class SideNet(nn.Module):
    def __init__(self):
        super(SideNet, self).__init__()
        self.pool = nn.MaxPool2d(2, 2)
        self.conv11 = nn.Conv2d(3, 6, 5)
        self.conv12 = nn.Conv2d(6, 16, 5)
        
        self.conv11.weight.data.copy_( net.conv1.weight.data)
        self.conv12.weight.data.copy_(net.conv2.weight.data)
        
        self.conv21 = nn.Conv2d(3, 6, 5)
        self.conv22 = nn.Conv2d(6, 16, 5)
        
        self.fc11 = nn.Linear(16 * 5 * 5, 120)
        self.fc12 = nn.Linear(120, 84)
    
        self.fc11.weight.data.copy_(net.fc1.weight.data)
        self.fc12.weight.data.copy_(net.fc2.weight.data)
        
        self.fc21 = nn.Linear(16 * 5 * 5, 120)
        self.fc22 = nn.Linear(120, 84)
        
        self.fc3 = nn.Linear(168,10)
    def forward(self, x):
        y = self.pool(F.relu(self.conv11(x)))
        y = self.pool(F.relu(self.conv12(y)))
        y = y.view(-1, 16 * 5 * 5)
        y = F.relu(self.fc11(y))
        y = F.relu(self.fc12(y))
        
        x = self.pool(F.relu(self.conv21(x)))
        x = self.pool(F.relu(self.conv22(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc21(x))
        x = F.relu(self.fc22(x))
    
        out = self.fc3(torch.cat((x,y),dim=1))
        return out
# create a new model
net1 = SideNet()
net1 = net1.to(device)

#check weights
print(net.fc2.weight.data)
print(net1.fc12.weight.data)
print(net1.fc22.weight.data)
#for param in net.parameters():
#    param.requires_grad = False

# default `log_dir` is "runs" - we'll be more specific here
writer = SummaryWriter('runs/temp')
# write model to tensorboard
writer.add_graph(net1, images)
writer.close()
# train the new model

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(net1.parameters(), lr=0.001)
for epoch in tqdm(range(100)):  # loop over the dataset multiple times
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data
        inputs = inputs.to(device)
        labels = labels.to(device)
# zero the parameter gradients
        optimizer.zero_grad()
# forward + backward + optimize
        outputs = net1(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
# print statistics
        
        running_loss += loss.item()
        if i % 100 == 99:    # print every 2000 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for data in trainloader:
            images, labels = data
            images = images.to(device)
            labels = labels.to(device)
            outputs = net1(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
        print('Accuracy of the network on the 10000 train images: %d %% at epoch  %d ' % (100 * correct / total, epoch))

    correct = 0
    total = 0
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            images = images.to(device)
            labels = labels.to(device)
            outputs = net1(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
        print('Accuracy of the network on the 10000 test images: %d %% at epoch  %d ' % (100 * correct / total, epoch))

print('Finished Training')

correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        images = images.to(device)
        labels = labels.to(device)
        outputs = net1(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))
#check weights
print(net.fc2.weight.data)
print(net1.fc12.weight.data)
print(net1.fc22.weight.data)